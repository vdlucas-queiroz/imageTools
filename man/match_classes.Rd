% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/13_confusion_matrix.R
\name{match_classes}
\alias{match_classes}
\title{Match Predicted Classes with Actual Classes and Convert to Class Names}
\usage{
match_classes(predicted_classes, test_points, classes, replace_names = NULL)
}
\arguments{
\item{predicted_classes}{A numeric vector or a column in a dataframe that contains the predicted class indices.}

\item{test_points}{A dataframe that must contain at least one column named 'Class', which includes the actual class indices.}

\item{classes}{A character vector containing the names of the classes. The order of the names in this vector
should correspond to the numeric indices of the classes (i.e., the first name corresponds to index 1, and so on).}

\item{replace_names}{A dictionary to replace the names}
}
\value{
A dataframe with two columns: 'predicted_class' and 'Class'. Both columns are converted to factors with levels corresponding
        to all unique class names derived from the numeric indices provided in the input. This facilitates direct comparison
        and analysis of classification results.
}
\description{
This function takes numeric predicted class indices and a test dataset, and maps these indices
to their corresponding class names based on a provided vector of class names. It returns a dataframe
where both predicted and actual class indices are replaced with class names, and both are converted
to factors with levels corresponding to all unique class names present.
}
\details{
The function first combines the `predicted_classes` with the actual class indices from `test_points` into a new dataframe.
Then, it replaces the numeric indices in the `predicted_classes` column with their corresponding class names from the `classes` vector.
After mapping the numeric indices to class names, it sorts and finds all unique class names to set the factor levels for both
predicted and actual classes, ensuring consistent representation and facilitating comparison or further analysis.

The resulting dataframe has two columns: 'predicted_class' and 'Class', both as factors with the same levels (the unique class names).
This setup is particularly useful for subsequent data analysis tasks that require comparing predicted and actual classes, such as
generating confusion matrices or calculating classification metrics.
}
